@using SampleAppManager.LiteDB;
@using SampleAppManager.Model;
@using SampleAppManager.Pages.Dialoge;
@using System.Diagnostics;
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject ProcessVersionWithStatus ProcessVersionStatus
@inject NotificationService _notice
@inject LiteDbContext ProcessVersionData
@inject Authentication authentication
@inject ISessionStorageService SessionStorage

<Layout Style="min-height: 100vh; ">
	<Sider Collapsible Collapsed=@collapsed OnCollapse=@onCollapse>
		<div class="logo" />
		<Menu Theme="MenuTheme.Dark" DefaultSelectedKeys=@(new[]{ProcessVersionStatus.processVersion[0].VersionName}) Mode="MenuMode.Inline">
			<GridRow Justify="center" Align="middle">
				@*todo 需要级联数据，刷新*@
				<NewVersionDialoge title="新版本" OnConfirm="AddNewVersion"></NewVersionDialoge>
			</GridRow>
			@foreach (var item in ProcessVersionStatus.processVersion)
			{
				<MenuItem Key=@item.VersionName OnClick="()=>{VersionClick(item.VersionName);}">
					<GridRow Justify="start" Align="middle">
						<GridCol Span="4">
								@item.VersionName
						</GridCol>
						@if (authentication.isAdmin)
						{
							<GridCol Span="4" Offset="16">
								<Button Type="@ButtonType.Primary" Size="@ButtonSize.Small" Icon="@IconType.Outline.Delete" @onclick="@(e => Delete(item))"></Button>
							</GridCol>
						}
					</GridRow>
				</MenuItem>
			}
		</Menu>
	</Sider>
	<Layout Class="site-layout">
		<Header Class="site-layout-background" Style=" padding: 0 ;">
			<GridRow Justify="end">
			<Space>
				<SpaceItem>
				<GridCol>	
				<Button Type="@ButtonType.Primary" Size="@ButtonSize.Large" Icon="@IconType.Outline.Home" @onclick="@(e => Home())"></Button>
				</GridCol>
				</SpaceItem>

				<SpaceItem>
				<GridCol>
				<Button Type="@ButtonType.Primary" Size="@ButtonSize.Large" Icon="@IconType.Outline.UserSwitch" @onclick=EditorUser>账户管理</Button>
				</GridCol>
				</SpaceItem>
				
				<SpaceItem>
				<GridCol>
				<LoginDialoge title="登录" OnConfirm="Login"></LoginDialoge>
				</GridCol>
				</SpaceItem>
			</Space>
			</GridRow>
		</Header>
		@Body
	</Layout>
</Layout>


@code {
	bool collapsed;

	public void Home()
	{
		NavigationManager.NavigateTo("/");
	}

	public void Delete(ProcessVersion version)
	{
		ProcessVersionStatus.processVersion.Remove(version);
		ProcessVersionData.ProcessVersions.Delete(version);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		var userData = await SessionStorage.GetItemAsync<UserItem>("UserData");

		if (userData != null)
		{
			authentication.isUpload = userData.UpLoad;
			authentication.isAdmin = userData.IsAdmin;
			authentication.isChecking = userData.isChecking;
			authentication.isNewVersion = userData.UpLoad;
		}
	}

	protected override void OnInitialized()
	{
		ProcessVersionStatus.processVersion = new List<ProcessVersion>();
		ProcessVersionStatus.curSelect = new ProcessVersion();
		ProcessVersionStatus.processVersion = ProcessVersionData.ProcessVersions.GetProcessVersion();
		ProcessVersionStatus.curSelect = ProcessVersionStatus.processVersion[0];


	}

	void onCollapse(bool collapsed)
	{
		Console.WriteLine(collapsed);
		this.collapsed = collapsed;
	}

	void AddNewVersion(ProcessVersion version)
	{
		//Todo form  增加新版本
		if (!authentication.isNewVersion)
		{
			return;
		}
		version.RouteName = version.VersionName.Replace(".", "_");
		ProcessVersionData.ProcessVersions.Add(version);
		ProcessVersionStatus.processVersion.Add(version);
	}


	void Login(UserItem loginUser)
	{
		if (string.IsNullOrEmpty(loginUser.UserName))
		{
			return;
		}
		//Todo  登录
		var users= ProcessVersionData.Users.GetUser(loginUser.UserName);
		if (users.Count==0)
		{
			return;
		}

		if (users[0].Password == loginUser.Password)
		{
			var user = users[0];
			authentication.isUpload = user.UpLoad;
			authentication.isChecking= user.isChecking;
			authentication.isAdmin= user.IsAdmin;
			authentication.isNewVersion= user.IsAdmin;
			SessionStorage.SetItemAsync("UserData", user);
		}
	}

	void VersionClick(string selectVresion)
	{
		var elements = ProcessVersionData.ProcessVersions.GetProcessVersion(selectVresion);
		if (elements.Count==0)
		{
			ProcessVersionStatus.curSelect = new ProcessVersion();
			return;
		}
		//todo 切到指定版本
		var curSelectProcess = elements
		.Where(o=>o.VersionName==selectVresion)
		.ToList()
		.First();

		ProcessVersionStatus.curSelect = curSelectProcess;
		NavigationManager.NavigateTo($"/ProcessVersion/{ProcessVersionStatus.curSelect.RouteName}");
	}

	async void EditorUser()
	{
		if (!authentication.isAdmin)
		{
			return;
		}
		NavigationManager.NavigateTo("/UserManager");
	}

}


<style>
	#components-layout-demo-side .logo {
		height: 32px;
		background: rgba(255, 255, 255, 0.2);
		margin: 16px;
	}

	.site-layout .site-layout-background {
		background: #fff;
	}
</style>
