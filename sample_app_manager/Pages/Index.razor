@page "/"
@inject NavigationManager NavigationManager
@using BootstrapBlazor.Components
@using LiteDB;
@inject IJSRuntime JS
@inject IWebHostEnvironment env
Index

@inject LiteDbContext Data

<div>
	<Space Direction="DirectionVHType.Vertical"  Align="center">
		<SpaceItem>
			<AntDesign.Layout>
				<AuthorizeView>
					<Authorized>
						<Affix OffsetTop=10>
						<span>You're authorized as @context.User.Identity.Name</span>
						<Upload Action="/api/file/upload"
								BeforeUpload="(file)=>{return frontendUpload(file);}"
								Name="files"
								OnChange="OnUploadChange"
								Drag=true
								OnCompleted="OnCompleted">
							<p class="ant-upload-drag-icon">
								<Icon Type="inbox" />
							</p>
							<p class="ant-upload-text">Click or drag file to this area to upload</p>
							<p class="ant-upload-hint">
								Support for a single or bulk upload.
							</p>
						</Upload>
					</Affix>
					</Authorized>
					<NotAuthorized>
						<span>You're not authorized</span>
					</NotAuthorized>
				</AuthorizeView>
			</AntDesign.Layout>
		</SpaceItem>
		<SpaceItem>
			<AntDesign.Layout>
				<span>AppList</span>
				<ListView TItem="APKItem" Items="appItems">
					<HeaderTemplate>
						<div>最近的上传</div>
					</HeaderTemplate>
					<BodyTemplate>
						<BootstrapBlazor.Components.Card>
							<BodyTemplate>
								<Space Direction="DirectionVHType.Vertical"  Align="center">
									<SpaceItem>
										<Space Direction="DirectionVHType.Vertical">
											<SpaceItem>
												@context.Name
											</SpaceItem>
											<SpaceItem>
												@context.Description
											</SpaceItem>
										</Space>
									</SpaceItem>

									<SpaceItem>
								<QRCode Content="@context.QRcode" Width="200"></QRCode>
									</SpaceItem>

									<SpaceItem>
										<Space Direction="DirectionVHType.Horizontal">
											<SpaceItem>
												<AntDesign.Button Type="@AntDesign.ButtonType.Primary" OnClick="@(e => DownloadFileFromURL(@context))">下载</AntDesign.Button>
											</SpaceItem>
											<SpaceItem>
												<AntDesign.Button Type="@AntDesign.ButtonType.Primary" OnClick="@(e => Copy(@context))">复制</AntDesign.Button>
											</SpaceItem>

											@if (user.IsInRole("Administrator"))
											{
												<SpaceItem>
													<AntDesign.Button Type="@AntDesign.ButtonType.Primary" OnClick="@(e => Delete(@context))">删除</AntDesign.Button>
												</SpaceItem>
											}
										</Space>

									</SpaceItem>

									<SpaceItem>
										@(context.CustomerId.CreationTime.AddHours(8))
									</SpaceItem>
								</Space>
							</BodyTemplate>
						</BootstrapBlazor.Components.Card>
					</BodyTemplate>
				</ListView>
			</AntDesign.Layout>
		</SpaceItem>
	</Space>
</div>

@code {

	private Task<QueryData<APKItem>> OnQueryAsync(QueryPageOptions options)
	{
		var items = appItems.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems);
		return Task.FromResult(new QueryData<APKItem>()
			{
				Items = items,
				TotalCount = appItems.Count()
			});
	}

	public async void DownloadFileFromURL(APKItem appSrc)
	{
		try
		{

			var fileName = appSrc.Name;
			var fileURL = appSrc.DownLoadURL;
			await JS.InvokeVoidAsync("open", fileURL);
			//await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);
			//await HttpClients.GetFromJsonAsync($"{NavigationManager.BaseUri}/api/download/{fileURL}");
		}
		catch (Exception)
		{

		}

	}

	public async void Copy(APKItem appSrc)
	{
		try
		{
			string fileURL = appSrc.DownLoadURL;
			await JS.InvokeVoidAsync("setClipboard", fileURL);

		}
		catch (Exception)
		{

		}

	}

	public void Delete(APKItem appSrc)
	{
		DeleteVersionAPK(appSrc.RouteVersionName, appSrc.PiplineName, appSrc.CustomerId);
		Data.Apps.Delete(appSrc.CustomerId);
		appItems.Remove(appSrc);
		if (!string.IsNullOrEmpty(appSrc.localPath))
		{
			if (File.Exists(appSrc.localPath))
			{
				File.Delete(appSrc.localPath);
			}
		}
	}
	public void DeleteVersionAPK(string RouteversionName,string pipLineName,ObjectId appId)
	{
		var versions= Data.ProcessVersions.GetProcessVersion(RouteversionName);
		if (versions.Count==0)
		{
			return;
		}
		var version = versions.First();
		var pip = version.ProcessPiplines.Find((e) => e.PiplineName == pipLineName);
		if (pip==null)
		{
			return;
		}

		pip.ProcessItems.RemoveAll(e => e.Apk.CustomerId == appId);

		Data.ProcessVersions.Update(version);

	}
	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }

	private ClaimsPrincipal user
	{
		get
		{
			var authState = authenticationState;
			return authState?.Result.User;
		}
	}

	public string uploadUrl;
	List<APKItem> appItems = new List<APKItem>();
	protected override void OnInitialized()
	{
		appItems = Data.Apps.Get()
		.Where(x => !string.IsNullOrEmpty(x.QRcode))
		.OrderByDescending(x => x.CustomerId.CreationTime).ToList();
	}

	bool frontendUpload(UploadFileItem item)
	{
		//TODO 对上传文件做限制
		return true;
	}

	void OnUploadChange(UploadInfo file)
	{
		var x = file.File.Percent;

	}

	void OnCompleted(UploadInfo fileinfo)
	{

		if (fileinfo.File.State == UploadState.Success)
		{
			appItems = Data.Apps.Get()
			.Where(x => !string.IsNullOrEmpty(x.QRcode))
			.OrderByDescending(x => x.CustomerId.CreationTime).ToList();
		}
		StateHasChanged();
	}
}