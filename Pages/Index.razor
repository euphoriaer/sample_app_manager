@page "/"
@inject NavigationManager NavigationManager
@using BootstrapBlazor.Components
@inject IJSRuntime JS
@inject IWebHostEnvironment env
Index

@inject LiteDbContext Data

<div>
	<GridRow>
		<GridCol Span="12">
			<AntDesign.Layout>
				<AuthorizeView>
					<Authorized>
						<span>You're authorized as @context.User.Identity.Name</span>
						<Upload Action="/api/file/upload"
								BeforeUpload="(file)=>{return frontendUpload(file);}"
								Name="files"
								OnChange="OnUploadChange"
								Drag=true
								OnCompleted="OnSingleCompleted">
							<p class="ant-upload-drag-icon">
								<Icon Type="inbox" />
							</p>
							<p class="ant-upload-text">Click or drag file to this area to upload</p>
							<p class="ant-upload-hint">
								Support for a single or bulk upload.
							</p>
						</Upload>
					</Authorized>
					<NotAuthorized>
						<span>You're not authorized</span>
					</NotAuthorized>
				</AuthorizeView>
				</AntDesign.Layout>
				</GridCol>

				<GridCol Span="12">
				<AntDesign.Layout>
				<span>AppList</span>
				<AntList DataSource="@appItems" ItemLayout="@ListItemLayout.Vertical" Bordered="true" Split="true">
					<ChildContent Context="item">
						<ListItem>
							<Space Direction="DirectionVHType.Horizontal">

								<SpaceItem>
									<QRCode Content="@item.QRcode"></QRCode>
								</SpaceItem>

								<SpaceItem>

									<Space Direction="DirectionVHType.Vertical">
										<SpaceItem>
											@item.Name
										</SpaceItem>
										<SpaceItem>
											@item.Description
										</SpaceItem>
										<SpaceItem>
											@(item.CustomerId.CreationTime.AddHours(8))
										</SpaceItem>
									</Space>
								</SpaceItem>
							</Space>
							<Space Direction="DirectionVHType.Vertical">
								<SpaceItem>
									<AntDesign.Button Type="@AntDesign.ButtonType.Primary" OnClick="@(e => DownloadFileFromURL(item))">下载</AntDesign.Button>
								</SpaceItem>
								<SpaceItem>
									<AntDesign.Button Type="@AntDesign.ButtonType.Primary" OnClick="@(e => Copy(item))">复制</AntDesign.Button>
								</SpaceItem>

								@if (user.IsInRole("Administrator"))
								{
								<SpaceItem>
										<AntDesign.Button Type="@AntDesign.ButtonType.Primary" OnClick="@(e => Delete(item))">删除</AntDesign.Button>
								</SpaceItem>
								}
							</Space>
						</ListItem>
					</ChildContent>
				</AntList>
			</AntDesign.Layout>
		</GridCol>

	</GridRow>
</div>

@code {

	public async void DownloadFileFromURL(APKItem appSrc)
	{
		try
		{

			var fileName = appSrc.Name;
			var fileURL = appSrc.DownLoadURL;
			await JS.InvokeVoidAsync("open", fileURL);
			//await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);
			//await HttpClients.GetFromJsonAsync($"{NavigationManager.BaseUri}/api/download/{fileURL}");
		}
		catch (Exception)
		{

		}

	}

	public async void Copy(APKItem appSrc)
	{
		try
		{
			string fileURL = appSrc.DownLoadURL;
			await JS.InvokeVoidAsync("setClipboard", fileURL);
			//await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);
			//await HttpClients.GetFromJsonAsync($"{NavigationManager.BaseUri}/api/download/{fileURL}");
		}
		catch (Exception)
		{

		}

	}

	public void Delete(APKItem appSrc)
	{
		if (!string.IsNullOrEmpty(appSrc.localPath))
		{
			if (File.Exists(appSrc.localPath))
			{
				File.Delete(appSrc.localPath);
				Data.Apps.Delete(appSrc.CustomerId);
				appItems.Remove(appSrc);

			}
		}
	}

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }

	private ClaimsPrincipal user
	{
		get
		{
			var authState = authenticationState;
			return authState?.Result.User;
		}
	}

	public string uploadUrl;
	List<APKItem> appItems = new List<APKItem>();
	protected override void OnInitialized()
	{
		appItems = Data.Apps.Get()
		.Where(x => !string.IsNullOrEmpty(x.QRcode))
		.OrderByDescending(x => x.CustomerId.CreationTime).ToList();
	}

	bool frontendUpload(UploadFileItem item)
	{
		//TODO 对上传文件做限制
		return true;
	}

	void OnUploadChange(UploadInfo file)
	{
		var x = file.File.Percent;

	}

	void OnSingleCompleted(UploadInfo fileinfo)
	{

		if (fileinfo.File.State == UploadState.Success)
		{
			appItems = Data.Apps.Get()
			.Where(x => !string.IsNullOrEmpty(x.QRcode))
			.OrderByDescending(x => x.CustomerId.CreationTime).ToList();
		}
	}
}