@inject IMessageService _message
@inject IWebHostEnvironment Environment
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject HttpClient HttpClients
@using BootstrapBlazor.Components

<Space Direction="DirectionVHType.Vertical">
	<SpaceItem>
		<GridRow>
			<Input Placeholder="@appSrc.Name"
			@bind-Value="@appSrc.Name"
					  Bordered="false"
					  OnPressEnter="@(e => ChangeData(appSrc))"
				   OnBlur="@(e => ChangeData(appSrc))" ReadOnly=@(!user.IsInRole("Administrator")) />
		</GridRow>
		<GridRow>
			@if (!string.IsNullOrEmpty(appSrc.QRcode))
			{
				<QRCode Content="@appSrc.QRcode" Width="200"></QRCode>
			}
			else
			{
				<Image Width="200px" Src="@appSrc.DefaultImage" Preview=false />

			}

		</GridRow>
	</SpaceItem>
	<SpaceItem>
		@if (isLoading)
		{
			<div style="width: 200px;">
				<AntDesign.Progress Percent=progressPercent Size="@ProgressSize.Small" />
			</div>
		}
		@if (user.IsInRole("Administrator")
				&& string.IsNullOrEmpty(appSrc.QRcode))
		{
			<InputFile OnChange="@LoadFiles" multiple />
		}
	</SpaceItem>

	<SpaceItem>

		<TextArea Placeholder="安装包描述"
				  MinRows="1" MaxRows="3" @bind-Value="@appSrc.Description" 
				  Bordered="false"
				  OnPressEnter="@(e => ChangeData(appSrc))" 
				  OnBlur="@(e => ChangeData(appSrc))" ReadOnly=@(!user.IsInRole("Administrator")) />
	</SpaceItem>

	<SpaceItem>
		<GridRow>

			<AntDesign.Button Type="@AntDesign.ButtonType.Primary" OnClick="DownloadFileFromURL">下载</AntDesign.Button>

			<GridCol Span="1" />

			<AntDesign.Button Type="@AntDesign.ButtonType.Primary" OnClick="Copy">复制</AntDesign.Button>

			<GridCol Span="1" />

			@if (user.IsInRole("Administrator")
					&& !string.IsNullOrEmpty(appSrc.QRcode))
			{
				<AntDesign.Button Type="@AntDesign.ButtonType.Primary" OnClick="Delete">删除</AntDesign.Button>
			}
			<GridCol Span="1" />
		</GridRow>
	</SpaceItem>

</Space>


<style>
	.avatar-uploader > .ant-upload {
		width: 200px;
		height: 200px;
	}
</style>

@code {

	[Parameter]
	public APKItem appSrc { get; set; }
	private int progressPercent;
	private List<IBrowserFile> loadedFiles = new();
	private long maxFileSize = long.MaxValue;
	private int maxAllowedFiles = 1;
	private bool isLoading;

	[Parameter]
	public Action<APKItem> ChangeData { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }

	private ClaimsPrincipal user 
	{
		get
		{
			var authState = authenticationState;
			return authState?.Result.User;
		}
	}
	private async Task LoadFiles(InputFileChangeEventArgs e)
	{

		isLoading = true;
		loadedFiles.Clear();

		foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
		{
			try
			{

				loadedFiles.Add(file);

				var trustedFileNameForFileStorage = Path.GetRandomFileName() + file.Name;
				appSrc.Name = file.Name;
				var path = Path.Combine(Environment.WebRootPath, "files",
						trustedFileNameForFileStorage);
				var folder = Path.Combine(Environment.WebRootPath, "files");
				if (!Directory.Exists(folder))
				{
					Directory.CreateDirectory(folder);


				}

				await using FileStream writeStream = new(path, FileMode.Create);
				using var readStream = file.OpenReadStream(maxFileSize);
				var bytesRead = 0;
				var totalRead = 0;
				var buffer = new byte[1024 * 10];

				while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
				{
					totalRead += bytesRead;

					await writeStream.WriteAsync(buffer, 0, bytesRead);

					var process = Decimal.Divide(totalRead, file.Size);
					progressPercent = (int)(process*100);
					StateHasChanged();
				}

				_message.Info("上传完成");


				string downloadURL;
				System.Uri uri = new Uri(NavigationManager.BaseUri, false);
				var address = uri.Host;
				downloadURL = "https://" + address + $"/files/{trustedFileNameForFileStorage}";

				appSrc.localPath = path;
				appSrc.DownLoadURL = downloadURL;
				appSrc.QRcode = downloadURL;


				if (ChangeData != null)
				{
					ChangeData(appSrc);
				}
			}
			catch (Exception ex)
			{
				_message.Error(ex.Message);
			}
		}

		isLoading = false;
	}


	public async void DownloadFileFromURL()
	{
		try
		{

			var fileName = appSrc.Name;
			var fileURL = appSrc.DownLoadURL;
			await JS.InvokeVoidAsync("open",fileURL);
			//await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);
			//await HttpClients.GetFromJsonAsync($"{NavigationManager.BaseUri}/api/download/{fileURL}");
		}
		catch (Exception)
		{

		}

	}
	
	public async void Copy()
	{
		try
		{
			string fileURL = appSrc.DownLoadURL;
			await JS.InvokeVoidAsync("setClipboard", fileURL);
			//await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);
			//await HttpClients.GetFromJsonAsync($"{NavigationManager.BaseUri}/api/download/{fileURL}");
		}
		catch (Exception)
		{

		}

	}

	public void Delete()
	{
		if (!string.IsNullOrEmpty(appSrc.localPath))
		{
			if (File.Exists(appSrc.localPath))
			{
				File.Delete(appSrc.localPath);
				appSrc.DownLoadURL = "";
				appSrc.QRcode = "";
				appSrc.Name = "";
				appSrc.Description = "";
				if (ChangeData != null)
				{
					ChangeData(appSrc);
				}
			}
		}
	}
}
