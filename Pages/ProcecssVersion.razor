@page "/ProcessVersion/{version}"
@inject NavigationManager NavigationManager
@inject ProcessVersionWithStatus ProcessVersionStatus
@inject LiteDbContext ProcessVersionData
@inject IWebHostEnvironment Environment


@foreach (var pipline in ProcessVersionStatus.curSelect.ProcessPiplines)
{
	<Divider Orientation="left" Style="font-weight:bold">
		@pipline.PiplineName
		@if (user.IsInRole("Administrator"))
		{
			<Button Type="@ButtonType.Text" Shape="@ButtonShape.Circle" Size="@ButtonSize.Small" Icon="@IconType.Outline.Delete" @onclick="@(e => Delete(pipline))"></Button>
		}
	</Divider>

	<Space Direction="DirectionVHType.Horizontal" Align="end" Size="@($"{size}")">
		@foreach (var item in pipline.ProcessItems)
		{

			<SpaceItem>
				<AppItem appSrc="item.Apk" ChangeData="(loader)=>
				{
				item.Apk=loader;
				var pip = ProcessVersionStatus.curSelect;
				//新的
				var task = ProcessVersionData.ProcessVersions.Update(pip);
				}"/>
			</SpaceItem>
			@if (!item.IsFinalAPK)
			{
				<SpaceItem>
					<ProgressItem CheckConditionName="item.CheckCondition" 
					OnclickAction="OnCheckSave" 
					DeleteCheck="@(e=>DeleteCheck(pipline,item,e))" 
					UpdateCheck="@(e=>UpdateCheck(pipline,item,e))"
					AddCheck="@(()=>AddCheck(pipline,item))"
					/>
				</SpaceItem>
			}
			else
			{
				break;
			}

	}
	</Space>
}
@if (user.IsInRole("Administrator"))
{
	<div>
		<NewPiplineDialoge OnCancel="OnCancel" OnConfirm="OnConfirm" />
	</div>
}


@code {

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationState { get; set; }

	private ClaimsPrincipal user
	{
		get
		{
			var authState = authenticationState;
			return authState?.Result.User;
		}
	}

	public void DeleteCheck(ProcessPipline pip,ProcessItem item,CheckCondition check)
	{
		item.CheckCondition.Remove(check);
		ProcessVersionData.ProcessVersions.Update(ProcessVersionStatus.curSelect);
	}

	public void UpdateCheck(ProcessPipline pip, ProcessItem item, CheckCondition check)
	{
		ProcessVersionData.ProcessVersions.Update(ProcessVersionStatus.curSelect);
	}

	public void AddCheck(ProcessPipline pip, ProcessItem item)
	{
		item.CheckCondition.Add(new CheckCondition());
		ProcessVersionData.ProcessVersions.Update(ProcessVersionStatus.curSelect);
	}

	[Parameter]
	public string version { get; set; }
	double size = 15;

	public void Delete(ProcessPipline pip)
	{
		ProcessVersionStatus.curSelect.ProcessPiplines.Remove(pip);
		ProcessVersionData.ProcessVersions.Update(ProcessVersionStatus.curSelect);
	}

	protected override void OnInitialized()
	{
		var elements = ProcessVersionData.ProcessVersions.GetProcessVersion(version);
		if (elements.Count == 0)
		{
			ProcessVersionStatus.curSelect = new ProcessVersion();
			return;
		}
		//todo 切到指定版本
		var curSelectProcess = elements
		.Where(o => o.RouteName == version)
		.ToList()
		.First();

		ProcessVersionStatus.curSelect = curSelectProcess;
	}

	protected override async Task OnInitializedAsync()
	{

	}


	public void OnCheckSave()
	{
		var pip = ProcessVersionStatus.curSelect;
		//新的
		var task = ProcessVersionData.ProcessVersions.Update(pip);
	}

	public async void OnConfirm(ProcessPipline line)
	{
		if (string.IsNullOrEmpty(line.PiplineName))
		{
			return;
		}
		for (int i = 0; i < line.ProcessItems.Count; i++)
		{
			var curProcessItem = line.ProcessItems[i];
			if (i == line.ProcessItems.Count-1)
			{
				curProcessItem.IsFinalAPK = true;
			}
		}

		ProcessVersionStatus.curSelect.ProcessPiplines.Add(line);

		var pip = ProcessVersionStatus.curSelect;
		//新的
		var task= ProcessVersionData.ProcessVersions.Update(pip);
	}

	public async void OnCancel()
	{

	}
}